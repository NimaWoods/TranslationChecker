<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DeveloperToolsToolWindowSettingsV1" lastSelectedContentNodeId="text-diff">
    <developerToolsConfigurations>
      <developerToolConfiguration developerToolId="text-diff" id="3e8addd5-b934-4092-b1df-cf2f966901d3" name="Workbench">
        <properties>
          <property key="firstText" type="INPUT" value="kotlin.String|import java.awt.BorderLayout;&#10;import java.awt.Color;&#10;import java.awt.FlowLayout;&#10;import java.awt.GridLayout;&#10;import java.io.FileNotFoundException;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.io.OutputStream;&#10;import java.nio.file.Files;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.nio.file.StandardCopyOption;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Properties;&#10;import java.util.logging.Level;&#10;import java.util.logging.Logger;&#10;import java.util.stream.Collectors;&#10;import java.util.stream.Stream;&#10;&#10;import javax.swing.BorderFactory;&#10;import javax.swing.JButton;&#10;import javax.swing.JCheckBox;&#10;import javax.swing.JDialog;&#10;import javax.swing.JFrame;&#10;import javax.swing.JLabel;&#10;import javax.swing.JOptionPane;&#10;import javax.swing.JPanel;&#10;import javax.swing.JProgressBar;&#10;import javax.swing.JScrollPane;&#10;import javax.swing.JTable;&#10;import javax.swing.JTextField;&#10;import javax.swing.SwingUtilities;&#10;import javax.swing.SwingWorker;&#10;import javax.swing.UIManager;&#10;import javax.swing.table.DefaultTableModel;&#10;import javax.swing.table.JTableHeader;&#10;&#10;import com.formdev.flatlaf.FlatLightLaf;&#10;&#10;/** &#10; * This class is used to check the translations in the properties files.&#10; * It loads the settings from a properties file and uses the specified base path.&#10; * It then searches for all properties files in the specified languages and displays them in a table.&#10; *&#10; * @Author Niklas Fabritzius&#10; **/&#10;&#10;public class TranslationCheckerGUI extends JFrame {&#10;&#10;&#9;private String[] LANGUAGES;&#10;&#9;private String BASE_PATH;&#10;&#9;private static final Logger logger = Logger.getLogger(TranslationCheckerGUI.class.getName());&#10;&#10;&#9;private JTable table;&#10;&#9;private DefaultTableModel tableModel;&#10;&#9;private JProgressBar progressBar;&#10;&#9;private JLabel statusLabel;&#10;&#9;private Properties settings;&#10;&#9;private JTextField basePathField;&#10;&#9;private JTextField languagesField;&#10;&#9;private boolean settingsSaved = false;&#10;&#9;private JCheckBox searchUnsetOnlyCheckbox;&#10;&#10;&#9;private static class LanguageProperties {&#10;&#9;&#9;private final Properties properties;&#10;&#9;&#9;private final Path path;&#10;&#10;&#9;&#9;public LanguageProperties(Properties properties, Path path) {&#10;&#9;&#9;&#9;this.properties = properties;&#10;&#9;&#9;&#9;this.path = path;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;public Properties getProperties() {&#10;&#9;&#9;&#9;return properties;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;public Path getPath() {&#10;&#9;&#9;&#9;return path;&#10;&#9;&#9;}&#10;&#10;&#9;}&#10;&#10;&#9;public TranslationCheckerGUI() {&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;UIManager.setLookAndFeel(new FlatLightLaf());&#10;&#9;&#9;} catch (Exception e) {&#10;&#9;&#9;&#9;e.printStackTrace();&#10;&#9;&#9;}&#10;&#10;&#9;&#9;setTitle(&quot;Translation Checker&quot;);&#10;&#9;&#9;setSize(800, 600);&#10;&#9;&#9;setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;&#9;&#9;setExtendedState(JFrame.MAXIMIZED_BOTH);&#10;&#9;&#9;setLocationRelativeTo(null);&#10;&#10;&#9;&#9;String[] columnNames = { &quot;Language&quot;, &quot;Key&quot;, &quot;Value&quot;, &quot;File Path&quot; };&#10;&#9;&#9;tableModel = new DefaultTableModel(columnNames, 0) {&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;public boolean isCellEditable(int row, int column) {&#10;&#9;&#9;&#9;&#9;return column == 2;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;};&#10;&#10;&#9;&#9;tableModel.addTableModelListener(e -&gt; {&#10;&#9;&#9;&#9;int row = e.getFirstRow();&#10;&#9;&#9;&#9;int column = e.getColumn();&#10;&#10;&#9;&#9;&#9;if (column == 2) {&#10;&#9;&#9;&#9;&#9;String language = (String) tableModel.getValueAt(row, 0);&#10;&#9;&#9;&#9;&#9;String key = (String) tableModel.getValueAt(row, 1);&#10;&#9;&#9;&#9;&#9;String newValue = (String) tableModel.getValueAt(row, 2);&#10;&#9;&#9;&#9;&#9;String filePath = (String) tableModel.getValueAt(row, 3);&#10;&#10;&#9;&#9;&#9;&#9;updatePropertiesFile(language, key, newValue, filePath);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;});&#10;&#10;&#9;&#9;table = new JTable(tableModel);&#10;&#10;&#9;&#9;JTableHeader header = table.getTableHeader();&#10;&#9;&#9;header.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.GRAY));&#10;&#10;&#9;&#9;table.setShowGrid(true);&#10;&#9;&#9;table.setGridColor(Color.GRAY);&#10;&#10;&#9;&#9;table.getColumnModel().getColumn(0).setMinWidth(50);&#10;&#9;&#9;table.getColumnModel().getColumn(0).setMaxWidth(150);&#10;&#10;&#9;&#9;JScrollPane scrollPane = new JScrollPane(table);&#10;&#9;&#9;add(scrollPane, BorderLayout.CENTER);&#10;&#10;&#9;&#9;progressBar = new JProgressBar();&#10;&#9;&#9;progressBar.setStringPainted(true);&#10;&#9;&#9;progressBar.hide();&#10;&#10;&#9;&#9;statusLabel = new JLabel(&quot;Translation Checker&quot;);&#10;&#10;&#9;&#9;JButton refreshButton = new JButton(&quot;Refresh&quot;);&#10;&#9;&#9;refreshButton.addActionListener(e -&gt; startTranslationCheck());&#10;&#10;&#9;&#9;JButton settingsButton = new JButton(&quot;Settings&quot;);&#10;&#9;&#9;settingsButton.addActionListener(e -&gt; openSettingsDialog());&#10;&#10;&#9;&#9;JButton allTranslationsButton = new JButton(&quot;Edit Translations&quot;);&#10;&#9;&#9;allTranslationsButton.addActionListener(e -&gt; showAllTranslations());&#10;&#10;&#9;&#9;JTextField searchField = new JTextField(20);&#10;&#9;&#9;JButton searchButton = new JButton(&quot;Search&quot;);&#10;&#9;&#9;searchButton.addActionListener(e -&gt; {&#10;&#9;&#9;&#9;String search = searchField.getText();&#10;&#9;&#9;&#9;if (search.isEmpty()) {&#10;&#9;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;Please enter a search term.&quot;);&#10;&#9;&#9;&#9;&#9;return;&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;for (int i = 0; i &lt; tableModel.getRowCount(); i++) {&#10;&#9;&#9;&#9;&#9;String key = (String) tableModel.getValueAt(i, 1);&#10;&#9;&#9;&#9;&#9;if (key.contains(search)) {&#10;&#9;&#9;&#9;&#9;&#9;table.setRowSelectionInterval(i, i);&#10;&#9;&#9;&#9;&#9;&#9;table.scrollRectToVisible(table.getCellRect(i, 0, true));&#10;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;});&#10;&#10;&#9;&#9;loadSettings();&#10;&#10;&#9;&#9;JPanel southPanel = new JPanel(new BorderLayout());&#10;&#9;&#9;JPanel southWestPanel = new JPanel(new BorderLayout());&#10;&#9;&#9;JPanel northPanel = new JPanel(new BorderLayout());&#10;&#10;&#9;&#9;JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;&#10;&#9;&#9;searchPanel.add(searchField);&#10;&#9;&#9;searchPanel.add(searchButton);&#10;&#10;&#9;&#9;northPanel.add(searchPanel, BorderLayout.WEST);&#10;&#9;&#9;northPanel.add(allTranslationsButton, BorderLayout.EAST);&#10;&#10;&#9;&#9;southWestPanel.add(settingsButton, BorderLayout.WEST);&#10;&#9;&#9;southWestPanel.add(refreshButton, BorderLayout.CENTER);&#10;&#10;&#9;&#9;southPanel.add(southWestPanel, BorderLayout.WEST);&#10;&#9;&#9;southPanel.add(progressBar, BorderLayout.NORTH);&#10;&#9;&#9;southPanel.add(statusLabel, BorderLayout.EAST);&#10;&#10;&#9;&#9;add(southPanel, BorderLayout.SOUTH);&#10;&#9;&#9;add(northPanel, BorderLayout.NORTH);&#10;&#10;&#9;}&#10;&#10;&#9;public static void main(String[] args) {&#10;&#9;&#9;SwingUtilities.invokeLater(() -&gt; {&#10;&#9;&#9;&#9;TranslationCheckerGUI gui = new TranslationCheckerGUI();&#10;&#9;&#9;&#9;gui.setVisible(true);&#10;&#9;&#9;});&#10;&#9;}&#10;&#10;&#9;private void openSettingsDialog() {&#10;&#9;&#9;if (settings == null) {&#10;&#9;&#9;&#9;loadSettings();&#10;&#9;&#9;}&#10;&#10;&#9;&#9;showSettingsDialog(this);&#10;&#10;&#9;&#9;if (isSettingsSaved()) {&#10;&#9;&#9;&#9;loadSettings();&#10;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;Settings updated.&quot;, &quot;Settings Updated&quot;, JOptionPane.INFORMATION_MESSAGE);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;private void loadSettings() {&#10;&#9;&#9;settings = new Properties();&#10;&#9;&#9;Path settingsPath = Paths.get(&quot;settings.properties&quot;);&#10;&#10;&#9;&#9;if (Files.exists(settingsPath)) {&#10;&#9;&#9;&#9;try (InputStream input = Files.newInputStream(settingsPath)) {&#10;&#9;&#9;&#9;&#9;settings.load(input);&#10;&#9;&#9;&#9;} catch (IOException e) {&#10;&#9;&#9;&#9;&#9;logger.log(Level.SEVERE, &quot;Error loading settings file.&quot;, e);&#10;&#9;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;Error loading settings: &quot; + e.getMessage(), &quot;Error&quot;, JOptionPane.ERROR_MESSAGE);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;settings.setProperty(&quot;base.path&quot;, &quot;PATH&quot;);&#10;&#9;&#9;&#9;settings.setProperty(&quot;languages&quot;, &quot;de,en,es,fr,hu,it,nl,ru&quot;);&#10;&#10;&#9;&#9;&#9;try (OutputStream output = Files.newOutputStream(settingsPath)) {&#10;&#9;&#9;&#9;&#9;settings.store(output, &quot;Default settings&quot;);&#10;&#9;&#9;&#9;&#9;logger.info(&quot;Settings file created with default values.&quot;);&#10;&#9;&#9;&#9;} catch (IOException e) {&#10;&#9;&#9;&#9;&#9;logger.log(Level.SEVERE, &quot;Error creating settings file.&quot;, e);&#10;&#9;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;Error creating settings file: &quot; + e.getMessage(), &quot;Error&quot;, JOptionPane.ERROR_MESSAGE);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;BASE_PATH = settings.getProperty(&quot;base.path&quot;, &quot;PATH&quot;);&#10;&#9;&#9;LANGUAGES = settings.getProperty(&quot;languages&quot;, &quot;de,en,es,fr,hu,it,nl,ru&quot;).split(&quot;,&quot;);&#10;&#9;}&#10;&#10;&#9;private void showSettingsDialog(JFrame parent) {&#10;&#9;&#9;JDialog settingsDialog = new JDialog(parent, &quot;Settings&quot;, true);&#10;&#9;&#9;settingsDialog.setLayout(new GridLayout(4, 2));&#10;&#10;&#9;&#9;JLabel basePathLabel = new JLabel(&quot;Base Path:&quot;);&#10;&#9;&#9;basePathField = new JTextField(settings.getProperty(&quot;base.path&quot;, &quot;path_to_project&quot;));&#10;&#9;&#9;settingsDialog.add(basePathLabel);&#10;&#9;&#9;settingsDialog.add(basePathField);&#10;&#10;&#9;&#9;JLabel languagesLabel = new JLabel(&quot;Languages:&quot;);&#10;&#9;&#9;languagesField = new JTextField(settings.getProperty(&quot;languages&quot;, &quot;de,en,es,fr,hu,it,nl,ru&quot;));&#10;&#9;&#9;settingsDialog.add(languagesLabel);&#10;&#9;&#9;settingsDialog.add(languagesField);&#10;&#10;&#9;&#9;searchUnsetOnlyCheckbox = new JCheckBox(&quot;Search only unset keys&quot;,&#10;&#9;&#9;&#9;&#9;Boolean.parseBoolean(settings.getProperty(&quot;search.unset.only&quot;, &quot;true&quot;)));&#10;&#9;&#9;settingsDialog.add(new JLabel(&quot;Search unset keys only:&quot;));&#10;&#9;&#9;settingsDialog.add(searchUnsetOnlyCheckbox);&#10;&#10;&#9;&#9;JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));&#10;&#10;&#9;&#9;JButton saveButton = new JButton(&quot;Save&quot;);&#10;&#9;&#9;saveButton.addActionListener(e -&gt; saveSettings(settings, settingsDialog));&#10;&#9;&#9;buttonPanel.add(saveButton);&#10;&#10;&#9;&#9;JButton cancelButton = new JButton(&quot;Cancel&quot;);&#10;&#9;&#9;cancelButton.addActionListener(e -&gt; {&#10;&#9;&#9;&#9;settingsSaved = false;&#10;&#9;&#9;&#9;settingsDialog.dispose();&#10;&#9;&#9;});&#10;&#9;&#9;buttonPanel.add(cancelButton);&#10;&#10;&#9;&#9;settingsDialog.add(buttonPanel);&#10;&#10;&#9;&#9;settingsDialog.pack();&#10;&#9;&#9;settingsDialog.setLocationRelativeTo(parent);&#10;&#9;&#9;settingsDialog.setVisible(true);&#10;&#9;}&#10;&#10;&#9;private void saveSettings(Properties settings, JDialog dialog) {&#10;&#10;&#9;&#9;Path basePath = Path.of(basePathField.getText());&#10;&#10;&#9;&#9;if (!Files.exists(basePath) || !Files.isDirectory(basePath)) {&#10;&#9;&#9;&#9;logger.log(Level.SEVERE, &quot;Base path does not exist or is not a directory: &quot; + BASE_PATH);&#10;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;The specified base path does not exist or is not a valid directory: &quot; + BASE_PATH, &quot;Error&quot;,&#10;&#9;&#9;&#9;&#9;&#9;JOptionPane.ERROR_MESSAGE);&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Wenn sich die Einstellung &quot;Search only unset keys&quot; geändert hat, starte die Suche neu&#10;&#9;&#9;if (Boolean.parseBoolean(settings.getProperty(&quot;search.unset.only&quot;, &quot;false&quot;)) != searchUnsetOnlyCheckbox.isSelected()) {&#10;&#9;&#9;&#9;startTranslationCheck();&#10;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;settings.setProperty(&quot;base.path&quot;, basePathField.getText());&#10;&#9;&#9;settings.setProperty(&quot;languages&quot;, languagesField.getText());&#10;&#9;&#9;settings.setProperty(&quot;search.unset.only&quot;, Boolean.toString(searchUnsetOnlyCheckbox.isSelected()));&#10;&#10;&#9;&#9;try (OutputStream output = Files.newOutputStream(Paths.get(&quot;settings.properties&quot;))) {&#10;&#9;&#9;&#9;settings.store(output, null);&#10;&#9;&#9;&#9;settingsSaved = true;&#10;&#9;&#9;&#9;dialog.dispose();&#10;&#9;&#9;} catch (IOException ex) {&#10;&#9;&#9;&#9;JOptionPane.showMessageDialog(dialog, &quot;Error saving settings: &quot; + ex.getMessage(), &quot;Error&quot;, JOptionPane.ERROR_MESSAGE);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;public boolean isSettingsSaved() {&#10;&#9;&#9;return settingsSaved;&#10;&#9;}&#10;&#10;&#9;private void updatePropertiesFile(String language, String key, String newValue, String filePath) {&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;Properties properties = new Properties();&#10;&#9;&#9;&#9;try (InputStream input = Files.newInputStream(Paths.get(filePath))) {&#10;&#9;&#9;&#9;&#9;properties.load(input);&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;properties.setProperty(key, newValue);&#10;&#10;&#9;&#9;&#9;try (OutputStream output = Files.newOutputStream(Paths.get(filePath))) {&#10;&#9;&#9;&#9;&#9;properties.store(output, null);&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;System.out.println(&quot;Updated key '&quot; + key + &quot;' with new value '&quot; + newValue + &quot;' in file: &quot; + filePath);&#10;&#9;&#9;&#9;statusLabel.setText(&#10;&#9;&#9;&#9;&#9;&#9;&quot;Updated key '&quot; + key + &quot;' with new value '&quot; + newValue + &quot;' in file: &quot; + filePath + &quot; for language: &quot; + language);&#10;&#9;&#9;} catch (IOException ex) {&#10;&#9;&#9;&#9;logger.log(Level.SEVERE, &quot;Error updating properties file: &quot; + filePath, ex);&#10;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;Error updating properties file: &quot; + ex.getMessage(), &quot;Error&quot;, JOptionPane.ERROR_MESSAGE);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;private void showAllTranslations() {&#10;&#9;&#9;int selectedRow = table.getSelectedRow();&#10;&#9;&#9;if (selectedRow == -1) {&#10;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;Please select a row to view translations.&quot;);&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;String selectedKey = (String) tableModel.getValueAt(selectedRow, 1);&#10;&#9;&#9;Map&lt;String, String[]&gt; translationsWithPaths = loadTranslationsForKey(selectedKey);&#10;&#10;&#9;&#9;if (translationsWithPaths == null || translationsWithPaths.isEmpty()) {&#10;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;No translations found for the selected key.&quot;);&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;showTranslationsDialog(selectedKey, translationsWithPaths);&#10;&#9;}&#10;&#10;&#9;private Map&lt;String, String[]&gt; loadTranslationsForKey(String key) {&#10;&#9;&#9;Map&lt;String, String[]&gt; translationsWithPaths = new HashMap&lt;&gt;();&#10;&#9;&#9;for (String lang : LANGUAGES) {&#10;&#9;&#9;&#9;List&lt;Path&gt; paths;&#10;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;paths = findAllPropertiesFiles(BASE_PATH, &quot;messages_&quot; + lang + &quot;.properties&quot;);&#10;&#9;&#9;&#9;&#9;for (Path path : paths) {&#10;&#9;&#9;&#9;&#9;&#9;Properties properties = new Properties();&#10;&#9;&#9;&#9;&#9;&#9;try (InputStream inputStream = Files.newInputStream(path)) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;properties.load(inputStream);&#10;&#9;&#9;&#9;&#9;&#9;&#9;String value = properties.getProperty(key);&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (value != null) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;translationsWithPaths.put(lang, new String[] { value, path.toString() });&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;} catch (IOException e) {&#10;&#9;&#9;&#9;&#9;logger.log(Level.SEVERE, &quot;Error loading properties for language: &quot; + lang, e);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;return translationsWithPaths;&#10;&#9;}&#10;&#10;&#9;private void showTranslationsDialog(String key, Map&lt;String, String[]&gt; translationsWithPaths) {&#10;&#9;&#9;JDialog dialog = new JDialog(this, &quot;Translations for Key: &quot; + key, true);&#10;&#9;&#9;dialog.setLayout(new BorderLayout());&#10;&#10;&#9;&#9;String[] columnNames = { &quot;Language&quot;, &quot;Value&quot;, &quot;File Path&quot; };&#10;&#9;&#9;DefaultTableModel model = new DefaultTableModel(columnNames, 0) {&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;public boolean isCellEditable(int row, int column) {&#10;&#9;&#9;&#9;&#9;// Nur die &quot;Value&quot;-Spalte soll bearbeitbar sein&#10;&#9;&#9;&#9;&#9;return column == 1;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;};&#10;&#10;&#9;&#9;// Füge Zeilen mit Sprache, Wert und Dateipfad zur Tabelle hinzu&#10;&#9;&#9;for (Map.Entry&lt;String, String[]&gt; entry : translationsWithPaths.entrySet()) {&#10;&#9;&#9;&#9;String language = entry.getKey();&#10;&#9;&#9;&#9;String value = entry.getValue()[0];&#10;&#9;&#9;&#9;String filePath = entry.getValue()[1];&#10;&#9;&#9;&#9;model.addRow(new Object[] { language, value, filePath });&#10;&#9;&#9;}&#10;&#10;&#9;&#9;JTable translationTable = new JTable(model);&#10;&#9;&#9;JScrollPane scrollPane = new JScrollPane(translationTable);&#10;&#9;&#9;dialog.add(scrollPane, BorderLayout.CENTER);&#10;&#10;&#9;&#9;// Hinzufügen eines ActionListeners, um Änderungen zu speichern&#10;&#9;&#9;model.addTableModelListener(e -&gt; {&#10;&#9;&#9;&#9;int row = e.getFirstRow();&#10;&#9;&#9;&#9;int column = e.getColumn();&#10;&#10;&#9;&#9;&#9;// Wenn die Spalte bearbeitet wird (Spalte 1 ist der Wert)&#10;&#9;&#9;&#9;if (column == 1) {&#10;&#9;&#9;&#9;&#9;String newValue = (String) model.getValueAt(row, 1);&#10;&#9;&#9;&#9;&#9;String language = (String) model.getValueAt(row, 0);&#10;&#9;&#9;&#9;&#9;String filePath = (String) model.getValueAt(row, 2);&#10;&#10;&#9;&#9;&#9;&#9;// Methode aufrufen, um die Property-Datei zu aktualisieren&#10;&#9;&#9;&#9;&#9;updatePropertiesFile(language, key, newValue, filePath);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;});&#10;&#10;&#9;&#9;JButton closeButton = new JButton(&quot;Close&quot;);&#10;&#9;&#9;closeButton.addActionListener(e -&gt; dialog.dispose());&#10;&#9;&#9;dialog.add(closeButton, BorderLayout.SOUTH);&#10;&#10;&#9;&#9;dialog.setSize(600, 300);&#10;&#9;&#9;dialog.setLocationRelativeTo(this);&#10;&#9;&#9;dialog.setVisible(true);&#10;&#9;}&#10;&#10;&#9;private void startTranslationCheck() {&#10;&#9;&#9;progressBar.setValue(0);&#10;&#9;&#9;progressBar.setVisible(true);&#10;&#10;&#9;&#9;SwingWorker&lt;Void, Integer&gt; worker = createTranslationCheckWorker();&#10;&#10;&#9;&#9;worker.addPropertyChangeListener(evt -&gt; {&#10;&#9;&#9;&#9;if (&quot;progress&quot;.equals(evt.getPropertyName())) {&#10;&#9;&#9;&#9;&#9;progressBar.setValue((Integer) evt.getNewValue());&#10;&#9;&#9;&#9;}&#10;&#9;&#9;});&#10;&#10;&#9;&#9;worker.execute();&#10;&#9;}&#10;&#10;&#9;private SwingWorker&lt;Void, Integer&gt; createTranslationCheckWorker() {&#10;&#9;&#9;return new SwingWorker&lt;&gt;() {&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;protected Void doInBackground() throws Exception {&#10;&#9;&#9;&#9;&#9;Map&lt;String, List&lt;TranslationCheckerGUI.LanguageProperties&gt;&gt; propertiesMap = new HashMap&lt;&gt;();&#10;&#9;&#9;&#9;&#9;boolean searchUnsetOnly = Boolean.parseBoolean(settings.getProperty(&quot;search.unset.only&quot;, &quot;false&quot;));&#10;&#10;&#9;&#9;&#9;&#9;int totalSteps = 0;&#10;&#9;&#9;&#9;&#9;int completedSteps = 0;&#10;&#10;&#9;&#9;&#9;&#9;for (String lang : LANGUAGES) {&#10;&#9;&#9;&#9;&#9;&#9;List&lt;Path&gt; paths = findAllPropertiesFiles(BASE_PATH, &quot;messages_&quot; + lang + &quot;.properties&quot;);&#10;&#9;&#9;&#9;&#9;&#9;totalSteps += paths.size();&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;for (String lang : LANGUAGES) {&#10;&#9;&#9;&#9;&#9;&#9;List&lt;Path&gt; paths = findAllPropertiesFiles(BASE_PATH, &quot;messages_&quot; + lang + &quot;.properties&quot;);&#10;&#9;&#9;&#9;&#9;&#9;if (paths.isEmpty()) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;statusLabel.setText(&quot;Creating missing file for language: &quot; + lang);&#10;&#9;&#9;&#9;&#9;&#9;&#9;createMissingTranslationFile(lang);&#10;&#9;&#9;&#9;&#9;&#9;&#9;paths = findAllPropertiesFiles(BASE_PATH, &quot;messages_&quot; + lang + &quot;.properties&quot;);&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;List&lt;LanguageProperties&gt; languagePropertiesList = new ArrayList&lt;&gt;();&#10;&#9;&#9;&#9;&#9;&#9;for (Path path : paths) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;Properties properties = new Properties();&#10;&#9;&#9;&#9;&#9;&#9;&#9;try (InputStream inputStream = Files.newInputStream(path)) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;statusLabel.setText(&quot;Loading file: &quot; + path);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;properties.load(inputStream);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;languagePropertiesList.add(new LanguageProperties(properties, path));&#10;&#9;&#9;&#9;&#9;&#9;&#9;} catch (FileNotFoundException e) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;logger.warning(&quot;File not found for language: &quot; + lang + &quot; at path: &quot; + path);&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;completedSteps++;&#10;&#9;&#9;&#9;&#9;&#9;&#9;setProgress((completedSteps * 100) / totalSteps);&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;propertiesMap.put(lang, languagePropertiesList);&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;tableModel.setRowCount(0);&#10;&#10;&#9;&#9;&#9;&#9;for (String lang : LANGUAGES) {&#10;&#9;&#9;&#9;&#9;&#9;List&lt;LanguageProperties&gt; languageFiles = propertiesMap.get(lang);&#10;&#9;&#9;&#9;&#9;&#9;if (languageFiles == null || languageFiles.isEmpty())&#10;&#9;&#9;&#9;&#9;&#9;&#9;continue;&#10;&#10;&#9;&#9;&#9;&#9;&#9;for (LanguageProperties languageProps : languageFiles) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;Properties properties = languageProps.getProperties();&#10;&#9;&#9;&#9;&#9;&#9;&#9;Path filePath = languageProps.getPath();&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;for (String key : properties.stringPropertyNames()) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;String value = properties.getProperty(key);&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (searchUnsetOnly) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (value.isEmpty() || value.matches(&quot;.* \\((de|en|es|fr|hu|it|nl|ru)\\)$&quot;)) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;tableModel.addRow(new Object[] { lang, key, value, filePath.toString() });&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;tableModel.addRow(new Object[] { lang, key, value, filePath.toString() });&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;statusLabel.setText(&quot;Processing keys for language: &quot; + lang);&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;return null;&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;protected void done() {&#10;&#9;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;&#9;if (get() != null) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;statusLabel.setVisible(false);&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;} catch (Exception e) {&#10;&#9;&#9;&#9;&#9;&#9;logger.log(Level.SEVERE, &quot;Error in SwingWorker&quot;, e);&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;progressBar.setVisible(false);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;};&#10;&#9;}&#10;&#10;&#9;private List&lt;Path&gt; findAllPropertiesFiles(String basePath, String fileName) throws IOException {&#10;&#9;&#9;statusLabel.setText(&quot; Searching for all files named: &quot; + fileName);&#10;&#9;&#9;System.out.println(&quot;Searching for all files named: &quot; + fileName + &quot; in &quot; + basePath);&#10;&#10;&#9;&#9;try (Stream&lt;Path&gt; files = Files.walk(Paths.get(basePath))) {&#10;&#9;&#9;&#9;return files.filter(path -&gt; path.getFileName().toString().equals(fileName))&#10;&#9;&#9;&#9;&#9;&#9;.filter(path -&gt; !path.toString().contains(&quot;\\bin\\&quot;))&#10;&#9;&#9;&#9;&#9;&#9;.filter(path -&gt; !path.toString().contains(&quot;\\build\\&quot;))&#10;&#9;&#9;&#9;&#9;&#9;.collect(Collectors.toList());&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;private void createMissingTranslationFile(String lang) throws IOException {&#10;&#9;&#9;System.out.println(&quot;Creating missing translation file for: &quot; + lang);&#10;&#10;&#9;&#9;Path dePath = findPropertiesFile(BASE_PATH, &quot;messages_de.properties&quot;);&#10;&#9;&#9;if (dePath == null) {&#10;&#9;&#9;&#9;logger.severe(&quot;Cannot create missing file for &quot; + lang + &quot;. Reference file 'messages_de.properties' not found.&quot;);&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;try (Stream&lt;Path&gt; paths = Files.walk(Paths.get(BASE_PATH))) {&#10;&#9;&#9;&#9;List&lt;Path&gt; directories = paths.filter(Files::isDirectory).collect(Collectors.toList());&#10;&#9;&#9;&#9;for (Path directory : directories) {&#10;&#9;&#9;&#9;&#9;Path newFilePath = directory.resolve(&quot;messages_&quot; + lang + &quot;.properties&quot;);&#10;&#9;&#9;&#9;&#9;if (!Files.exists(newFilePath)) {&#10;&#9;&#9;&#9;&#9;&#9;Files.copy(dePath, newFilePath, StandardCopyOption.REPLACE_EXISTING);&#10;&#9;&#9;&#9;&#9;&#9;System.out.println(&quot;Created missing translation file: &quot; + newFilePath.toString());&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;statusLabel.setText(&quot;Fehlende Datei erstellt für Sprache: &quot; + lang);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;private Path findPropertiesFile(String basePath, String fileName) throws IOException {&#10;&#9;&#9;System.out.println(&quot;Searching for file: &quot; + fileName);&#10;&#9;&#9;try (Stream&lt;Path&gt; files = Files.walk(Paths.get(basePath))) {&#10;&#9;&#9;&#9;return files.filter(path -&gt; path.getFileName().toString().equals(fileName)).findFirst().orElse(null);&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;" />
          <property key="secondText" type="INPUT" value="kotlin.String|import java.awt.BorderLayout;&#10;import java.awt.Color;&#10;import java.awt.FlowLayout;&#10;import java.awt.GridLayout;&#10;import java.io.FileNotFoundException;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.io.OutputStream;&#10;import java.nio.file.Files;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.nio.file.StandardCopyOption;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Properties;&#10;import java.util.concurrent.ExecutionException;&#10;import java.util.logging.Level;&#10;import java.util.logging.Logger;&#10;import java.util.stream.Collectors;&#10;import java.util.stream.Stream;&#10;&#10;import javax.swing.BorderFactory;&#10;import javax.swing.JButton;&#10;import javax.swing.JCheckBox;&#10;import javax.swing.JDialog;&#10;import javax.swing.JFrame;&#10;import javax.swing.JLabel;&#10;import javax.swing.JOptionPane;&#10;import javax.swing.JPanel;&#10;import javax.swing.JProgressBar;&#10;import javax.swing.JScrollPane;&#10;import javax.swing.JTable;&#10;import javax.swing.JTextField;&#10;import javax.swing.SwingUtilities;&#10;import javax.swing.SwingWorker;&#10;import javax.swing.UIManager;&#10;import javax.swing.table.DefaultTableModel;&#10;import javax.swing.table.JTableHeader;&#10;&#10;import com.formdev.flatlaf.FlatLightLaf;&#10;&#10;/** &#10; * This class is used to check the translations in the properties files.&#10; * It loads the settings from a properties file and uses the specified base path.&#10; * It then searches for all properties files in the specified languages and displays them in a table.&#10; *&#10; * @Author Niklas Fabritzius&#10; **/&#10;&#10;public class TranslationCheckerGUI extends JFrame {&#10;&#10;&#9;private String[] LANGUAGES;&#10;&#9;private String BASE_PATH;&#10;&#9;private static final Logger logger = Logger.getLogger(TranslationCheckerGUI.class.getName());&#10;&#10;&#9;private JTable table;&#10;&#9;private DefaultTableModel tableModel;&#10;&#9;private JProgressBar progressBar;&#10;&#9;private JLabel statusLabel;&#10;&#9;private Properties settings;&#10;&#9;private JTextField basePathField;&#10;&#9;private JTextField languagesField;&#10;&#9;private boolean settingsSaved = false;&#10;&#9;private JCheckBox searchUnsetOnlyCheckbox;&#10;&#10;&#9;private static class LanguageProperties {&#10;&#9;&#9;private final Properties properties;&#10;&#9;&#9;private final Path path;&#10;&#10;&#9;&#9;public LanguageProperties(Properties properties, Path path) {&#10;&#9;&#9;&#9;this.properties = properties;&#10;&#9;&#9;&#9;this.path = path;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;public Properties getProperties() {&#10;&#9;&#9;&#9;return properties;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;public Path getPath() {&#10;&#9;&#9;&#9;return path;&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;public TranslationCheckerGUI() {&#10;&#9;&#9;initLookAndFeel();&#10;&#9;&#9;initComponents();&#10;&#9;&#9;loadSettings();&#10;&#9;}&#10;&#10;&#9;public static void main(String[] args) {&#10;&#9;&#9;SwingUtilities.invokeLater(() -&gt; {&#10;&#9;&#9;&#9;TranslationCheckerGUI gui = new TranslationCheckerGUI();&#10;&#9;&#9;&#9;gui.setVisible(true);&#10;&#9;&#9;});&#10;&#9;}&#10;&#10;&#9;private void initLookAndFeel() {&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;UIManager.setLookAndFeel(new FlatLightLaf());&#10;&#9;&#9;} catch (Exception e) {&#10;&#9;&#9;&#9;e.printStackTrace();&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;private void initComponents() {&#10;&#9;&#9;setTitle(&quot;Translation Checker&quot;);&#10;&#9;&#9;setSize(800, 600);&#10;&#9;&#9;setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;&#9;&#9;setExtendedState(JFrame.MAXIMIZED_BOTH);&#10;&#9;&#9;setLocationRelativeTo(null);&#10;&#10;&#9;&#9;String[] columnNames = { &quot;Language&quot;, &quot;Key&quot;, &quot;Value&quot;, &quot;File Path&quot; };&#10;&#9;&#9;tableModel = createTableModel(columnNames);&#10;&#10;&#9;&#9;table = new JTable(tableModel);&#10;&#9;&#9;configureTable();&#10;&#10;&#9;&#9;JScrollPane scrollPane = new JScrollPane(table);&#10;&#9;&#9;add(scrollPane, BorderLayout.CENTER);&#10;&#10;&#9;&#9;progressBar = new JProgressBar();&#10;&#9;&#9;progressBar.setStringPainted(true);&#10;&#9;&#9;progressBar.hide();&#10;&#10;&#9;&#9;statusLabel = new JLabel(&quot;Translation Checker&quot;);&#10;&#10;&#9;&#9;initButtonsAndPanels();&#10;&#9;}&#10;&#10;&#9;private DefaultTableModel createTableModel(String[] columnNames) {&#10;&#9;&#9;return new DefaultTableModel(columnNames, 0) {&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;public boolean isCellEditable(int row, int column) {&#10;&#9;&#9;&#9;&#9;return column == 2;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;};&#10;&#9;}&#10;&#10;&#9;private void configureTable() {&#10;&#9;&#9;JTableHeader header = table.getTableHeader();&#10;&#9;&#9;header.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.GRAY));&#10;&#9;&#9;table.setShowGrid(true);&#10;&#9;&#9;table.setGridColor(Color.GRAY);&#10;&#9;&#9;table.getColumnModel().getColumn(0).setMinWidth(50);&#10;&#9;&#9;table.getColumnModel().getColumn(0).setMaxWidth(150);&#10;&#9;}&#10;&#10;&#9;private void initButtonsAndPanels() {&#10;&#9;&#9;JButton refreshButton = new JButton(&quot;Refresh&quot;);&#10;&#9;&#9;refreshButton.addActionListener(e -&gt; startTranslationCheck());&#10;&#10;&#9;&#9;JButton settingsButton = new JButton(&quot;Settings&quot;);&#10;&#9;&#9;settingsButton.addActionListener(e -&gt; openSettingsDialog());&#10;&#10;&#9;&#9;JButton allTranslationsButton = new JButton(&quot;Edit Translations&quot;);&#10;&#9;&#9;allTranslationsButton.addActionListener(e -&gt; showAllTranslations());&#10;&#10;&#9;&#9;JTextField searchField = new JTextField(20);&#10;&#9;&#9;JButton searchButton = new JButton(&quot;Search&quot;);&#10;&#9;&#9;searchButton.addActionListener(e -&gt; searchTable(searchField.getText()));&#10;&#10;&#9;&#9;JPanel searchPanel = createSearchPanel(searchField, searchButton);&#10;&#9;&#9;JPanel southPanel = createSouthPanel(refreshButton, settingsButton, allTranslationsButton, searchPanel);&#10;&#10;&#9;&#9;add(southPanel, BorderLayout.SOUTH);&#10;&#9;}&#10;&#10;&#9;private JPanel createSearchPanel(JTextField searchField, JButton searchButton) {&#10;&#9;&#9;JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;&#9;&#9;searchPanel.add(searchField);&#10;&#9;&#9;searchPanel.add(searchButton);&#10;&#9;&#9;return searchPanel;&#10;&#9;}&#10;&#10;&#9;private JPanel createSouthPanel(JButton refreshButton, JButton settingsButton, JButton allTranslationsButton, JPanel searchPanel) {&#10;&#9;&#9;JPanel southPanel = new JPanel(new BorderLayout());&#10;&#9;&#9;JPanel southWestPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;&#10;&#9;&#9;southWestPanel.add(settingsButton);&#10;&#9;&#9;southWestPanel.add(refreshButton);&#10;&#9;&#9;southWestPanel.add(allTranslationsButton);&#10;&#10;&#9;&#9;southPanel.add(southWestPanel, BorderLayout.WEST);&#10;&#9;&#9;southPanel.add(progressBar, BorderLayout.NORTH);&#10;&#9;&#9;southPanel.add(statusLabel, BorderLayout.EAST);&#10;&#9;&#9;southPanel.add(searchPanel, BorderLayout.NORTH);&#10;&#9;&#9;return southPanel;&#10;&#9;}&#10;&#10;&#9;private void searchTable(String search) {&#10;&#9;&#9;if (search.isEmpty()) {&#10;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;Please enter a search term.&quot;);&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;for (int i = 0; i &lt; tableModel.getRowCount(); i++) {&#10;&#9;&#9;&#9;String key = (String) tableModel.getValueAt(i, 1);&#10;&#9;&#9;&#9;if (key.contains(search)) {&#10;&#9;&#9;&#9;&#9;table.setRowSelectionInterval(i, i);&#10;&#9;&#9;&#9;&#9;table.scrollRectToVisible(table.getCellRect(i, 0, true));&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;private void startTranslationCheck() {&#10;&#9;&#9;progressBar.setValue(0);&#10;&#9;&#9;progressBar.setVisible(true);&#10;&#9;&#9;SwingWorker&lt;Void, Integer&gt; worker = createSwingWorker();&#10;&#10;&#9;&#9;worker.addPropertyChangeListener(evt -&gt; {&#10;&#9;&#9;&#9;if (&quot;progress&quot;.equals(evt.getPropertyName())) {&#10;&#9;&#9;&#9;&#9;progressBar.setValue((Integer) evt.getNewValue());&#10;&#9;&#9;&#9;}&#10;&#9;&#9;});&#10;&#9;&#9;worker.execute();&#10;&#9;}&#10;&#10;&#9;private SwingWorker&lt;Void, Integer&gt; createSwingWorker() {&#10;&#9;&#9;return new SwingWorker&lt;&gt;() {&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;protected Void doInBackground() throws Exception {&#10;&#9;&#9;&#9;&#9;Map&lt;String, List&lt;LanguageProperties&gt;&gt; propertiesMap = new HashMap&lt;&gt;();&#10;&#9;&#9;&#9;&#9;boolean searchUnsetOnly = Boolean.parseBoolean(settings.getProperty(&quot;search.unset.only&quot;, &quot;false&quot;));&#10;&#9;&#9;&#9;&#9;int totalSteps = calculateTotalSteps();&#10;&#10;&#9;&#9;&#9;&#9;for (String lang : LANGUAGES) {&#10;&#9;&#9;&#9;&#9;&#9;List&lt;Path&gt; paths = findAllPropertiesFiles(BASE_PATH, &quot;messages_&quot; + lang + &quot;.properties&quot;);&#10;&#9;&#9;&#9;&#9;&#9;propertiesMap.put(lang, loadLanguageProperties(lang, paths, totalSteps));&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;updateTable(propertiesMap, searchUnsetOnly);&#10;&#9;&#9;&#9;&#9;return null;&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;protected void done() {&#10;&#9;&#9;&#9;&#9;progressBar.setVisible(false);&#10;&#9;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;&#9;get();&#10;&#9;&#9;&#9;&#9;} catch (InterruptedException | ExecutionException e) {&#10;&#9;&#9;&#9;&#9;&#9;logger.log(Level.SEVERE, &quot;Error in SwingWorker&quot;, e);&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;};&#10;&#9;}&#10;&#10;&#9;private int calculateTotalSteps() throws IOException {&#10;&#9;&#9;int totalSteps = 0;&#10;&#9;&#9;for (String lang : LANGUAGES) {&#10;&#9;&#9;&#9;totalSteps += findAllPropertiesFiles(BASE_PATH, &quot;messages_&quot; + lang + &quot;.properties&quot;).size();&#10;&#9;&#9;}&#10;&#9;&#9;return totalSteps;&#10;&#9;}&#10;&#10;&#9;private List&lt;LanguageProperties&gt; loadLanguageProperties(String lang, List&lt;Path&gt; paths, int totalSteps) throws IOException {&#10;&#9;&#9;List&lt;LanguageProperties&gt; languagePropertiesList = new ArrayList&lt;&gt;();&#10;&#9;&#9;int completedSteps = 0;&#10;&#10;&#9;&#9;for (Path path : paths) {&#10;&#9;&#9;&#9;Properties properties = new Properties();&#10;&#9;&#9;&#9;try (InputStream inputStream = Files.newInputStream(path)) {&#10;&#9;&#9;&#9;&#9;statusLabel.setText(&quot;Loading file: &quot; + path);&#10;&#9;&#9;&#9;&#9;properties.load(inputStream);&#10;&#9;&#9;&#9;&#9;languagePropertiesList.add(new LanguageProperties(properties, path));&#10;&#9;&#9;&#9;} catch (FileNotFoundException e) {&#10;&#9;&#9;&#9;&#9;logger.warning(&quot;File not found for language: &quot; + lang + &quot; at path: &quot; + path);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;completedSteps++;&#10;&#9;&#9;&#9;setProgress((completedSteps * 100) / totalSteps);&#10;&#9;&#9;}&#10;&#9;&#9;return languagePropertiesList;&#10;&#9;}&#10;&#10;&#9;private void updateTable(Map&lt;String, List&lt;LanguageProperties&gt;&gt; propertiesMap, boolean searchUnsetOnly) {&#10;&#9;&#9;tableModel.setRowCount(0);&#10;&#10;&#9;&#9;for (String lang : LANGUAGES) {&#10;&#9;&#9;&#9;List&lt;LanguageProperties&gt; languageFiles = propertiesMap.get(lang);&#10;&#9;&#9;&#9;if (languageFiles == null || languageFiles.isEmpty()) continue;&#10;&#10;&#9;&#9;&#9;for (LanguageProperties languageProps : languageFiles) {&#10;&#9;&#9;&#9;&#9;Properties properties = languageProps.getProperties();&#10;&#9;&#9;&#9;&#9;Path filePath = languageProps.getPath();&#10;&#10;&#9;&#9;&#9;&#9;for (String key : properties.stringPropertyNames()) {&#10;&#9;&#9;&#9;&#9;&#9;String value = properties.getProperty(key);&#10;&#9;&#9;&#9;&#9;&#9;if (!searchUnsetOnly || (value.isEmpty() || value.matches(&quot;.* \\((de|en|es|fr|hu|it|nl|ru)\\)$&quot;))) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;tableModel.addRow(new Object[]{lang, key, value, filePath.toString()});&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;private List&lt;Path&gt; findAllPropertiesFiles(String basePath, String fileName) throws IOException {&#10;&#9;&#9;statusLabel.setText(&quot; Searching for all files named: &quot; + fileName);&#10;&#9;&#9;System.out.println(&quot;Searching for all files named: &quot; + fileName + &quot; in &quot; + basePath);&#10;&#10;&#9;&#9;try (Stream&lt;Path&gt; files = Files.walk(Paths.get(basePath))) {&#10;&#9;&#9;&#9;return files.filter(path -&gt; path.getFileName().toString().equals(fileName))&#10;&#9;&#9;&#9;&#9;&#9;.filter(path -&gt; !path.toString().contains(&quot;\\bin\\&quot;))&#10;&#9;&#9;&#9;&#9;&#9;.filter(path -&gt; !path.toString().contains(&quot;\\build\\&quot;))&#10;&#9;&#9;&#9;&#9;&#9;.collect(Collectors.toList());&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;private void openSettingsDialog() {&#10;&#9;&#9;if (settings == null) {&#10;&#9;&#9;&#9;loadSettings();&#10;&#9;&#9;}&#10;&#9;&#9;showSettingsDialog(this);&#10;&#10;&#9;&#9;if (isSettingsSaved()) {&#10;&#9;&#9;&#9;loadSettings();&#10;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;Settings updated.&quot;, &quot;Settings Updated&quot;, JOptionPane.INFORMATION_MESSAGE);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;private void loadSettings() {&#10;&#9;&#9;settings = new Properties();&#10;&#9;&#9;Path settingsPath = Paths.get(&quot;settings.properties&quot;);&#10;&#10;&#9;&#9;try (InputStream input = Files.newInputStream(settingsPath)) {&#10;&#9;&#9;&#9;settings.load(input);&#10;&#9;&#9;} catch (IOException e) {&#10;&#9;&#9;&#9;createDefaultSettings(settingsPath);&#10;&#9;&#9;}&#10;&#10;&#9;&#9;BASE_PATH = settings.getProperty(&quot;base.path&quot;, &quot;PATH&quot;);&#10;&#9;&#9;LANGUAGES = settings.getProperty(&quot;languages&quot;, &quot;de,en,es,fr,hu,it,nl,ru&quot;).split(&quot;,&quot;);&#10;&#9;}&#10;&#10;&#9;private void createDefaultSettings(Path settingsPath) {&#10;&#9;&#9;settings.setProperty(&quot;base.path&quot;, &quot;PATH&quot;);&#10;&#9;&#9;settings.setProperty(&quot;languages&quot;, &quot;de,en,es,fr,hu,it,nl,ru&quot;);&#10;&#10;&#9;&#9;try (OutputStream output = Files.newOutputStream(settingsPath)) {&#10;&#9;&#9;&#9;settings.store(output, &quot;Default settings&quot;);&#10;&#9;&#9;&#9;logger.info(&quot;Settings file created with default values.&quot;);&#10;&#9;&#9;} catch (IOException e) {&#10;&#9;&#9;&#9;logger.log(Level.SEVERE, &quot;Error creating settings file.&quot;, e);&#10;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;Error creating settings file: &quot; + e.getMessage(), &quot;Error&quot;, JOptionPane.ERROR_MESSAGE);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;private void showAllTranslations() {&#10;&#9;&#9;int selectedRow = table.getSelectedRow();&#10;&#9;&#9;if (selectedRow == -1) {&#10;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;Please select a row to view translations.&quot;);&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;String selectedKey = (String) tableModel.getValueAt(selectedRow, 1);&#10;&#9;&#9;Map&lt;String, String[]&gt; translationsWithPaths = loadTranslationsForKey(selectedKey);&#10;&#10;&#9;&#9;if (translationsWithPaths == null || translationsWithPaths.isEmpty()) {&#10;&#9;&#9;&#9;JOptionPane.showMessageDialog(this, &quot;No translations found for the selected key.&quot;);&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;showTranslationsDialog(selectedKey, translationsWithPaths);&#10;&#9;}&#10;&#10;&#9;private Map&lt;String, String[]&gt; loadTranslationsForKey(String key) {&#10;&#9;&#9;Map&lt;String, String[]&gt; translationsWithPaths = new HashMap&lt;&gt;();&#10;&#9;&#9;for (String lang : LANGUAGES) {&#10;&#9;&#9;&#9;List&lt;Path&gt; paths;&#10;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;paths = findAllPropertiesFiles(BASE_PATH, &quot;messages_&quot; + lang + &quot;.properties&quot;);&#10;&#9;&#9;&#9;&#9;for (Path path : paths) {&#10;&#9;&#9;&#9;&#9;&#9;Properties properties = new Properties();&#10;&#9;&#9;&#9;&#9;&#9;try (InputStream inputStream = Files.newInputStream(path)) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;properties.load(inputStream);&#10;&#9;&#9;&#9;&#9;&#9;&#9;String value = properties.getProperty(key);&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (value != null) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;translationsWithPaths.put(lang, new String[]{value, path.toString()});&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;} catch (IOException e) {&#10;&#9;&#9;&#9;&#9;logger.log(Level.SEVERE, &quot;Error loading properties for language: &quot; + lang, e);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;return translationsWithPaths;&#10;&#9;}&#10;&#10;&#9;private void showTranslationsDialog(String key, Map&lt;String, String[]&gt; translationsWithPaths) {&#10;&#9;&#9;JDialog dialog = new JDialog(this, &quot;Translations for Key: &quot; + key, true);&#10;&#9;&#9;dialog.setLayout(new BorderLayout());&#10;&#10;&#9;&#9;String[] columnNames = {&quot;Language&quot;, &quot;Value&quot;, &quot;File Path&quot;};&#10;&#9;&#9;DefaultTableModel model = new DefaultTableModel(columnNames, 0) {&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;public boolean isCellEditable(int row, int column) {&#10;&#9;&#9;&#9;&#9;return column == 1;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;};&#10;&#10;&#9;&#9;translationsWithPaths.forEach((language, details) -&gt;&#10;&#9;&#9;&#9;&#9;model.addRow(new Object[]{language, details[0], details[1]})&#10;&#9;&#9;);&#10;&#10;&#9;&#9;JTable translationTable = new JTable(model);&#10;&#9;&#9;JScrollPane scrollPane = new JScrollPane(translationTable);&#10;&#9;&#9;dialog.add(scrollPane, BorderLayout.CENTER);&#10;&#10;&#9;&#9;JButton closeButton = new JButton(&quot;Close&quot;);&#10;&#9;&#9;closeButton.addActionListener(e -&gt; dialog.dispose());&#10;&#9;&#9;dialog.add(closeButton, BorderLayout.SOUTH);&#10;&#10;&#9;&#9;dialog.setSize(600, 300);&#10;&#9;&#9;dialog.setLocationRelativeTo(this);&#10;&#9;&#9;dialog.setVisible(true);&#10;&#9;}&#10;}" />
        </properties>
      </developerToolConfiguration>
    </developerToolsConfigurations>
  </component>
</project>